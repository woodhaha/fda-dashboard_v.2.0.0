install.packages("DT")
setwd("C:/Abbvie_PP_Abhik/data/FAERS/openfda-dashboard-master/openfda-dashboard-master")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('openfda.R')
d <- fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count("patient.drug.openfda.generic_name") %>%
fda_limit(1000) %>%
fda_exec()) %>%
arrange(term) %>%
d <- tbl_df(fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count("patient.drug.openfda.generic_name") %>%
fda_limit(1000) %>%
fda_exec()) %>%
arrange(term) %>%
filter(nchar(term) > 4))$term
d <- tbl_df(fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count("patient.drug.openfda.generic_name") %>%
fda_limit(1000) %>%
fda_exec()) %>%
arrange(term) %>%
filter(nchar(term) > 4)$term
d <- tbl_df(fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count("patient.drug.openfda.generic_name") %>%
fda_limit(1000) %>%
fda_exec()) %>%
arrange(term) %>%
filter(nchar(term) > 4)
head(d)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
drug <- c("oxycodone","aspirin")
a <- dcast(
count_fda(variable = "patient.drug.drugindication",
drug),
term ~ drug, value.var = "count")
shiny::runApp()
count_fda <- function(variable, ...) {
dots <- unlist(list(...))
print (dots)
#   validate(
#     need(length(dots) < 5,
#          message = "Only up to four drugs allowed for now!"),
#     errorClass = "too-many-warning"
#   )
do.call(rbind,
lapply(dots, FUN = function(input_drug) {
tryCatch(
tbl_df(
query_drug(input_drug) %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count(variable) %>%
fda_exec()
) %>%
mutate(drug = input_drug),
error = function(e) {
stop("Oops, API limit hit, please try again shortly!")
})
}))
}
a <- dcast(
count_fda(variable = "patient.drug.drugindication",
drug),
term ~ drug, value.var = "count")
count_fda <- function(variable, ...) {
dots <- unlist(list(...))
print (dots)
#   validate(
#     need(length(dots) < 5,
#          message = "Only up to four drugs allowed for now!"),
#     errorClass = "too-many-warning"
#   )
do.call(rbind,
lapply(dots, FUN = function(input_drug) {
tryCatch(
tbl_df(
query_drug(input_drug) %>%
#fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count(variable) %>%
fda_exec()
) %>%
mutate(drug = input_drug),
error = function(e) {
stop("Oops, API limit hit, please try again shortly!")
})
}))
}
drug <- c("oxycodone","aspirin")
a <- dcast(
count_fda(variable = "patient.drug.drugindication",
drug),
term ~ drug, value.var = "count")
count_fda <- function(variable, ...) {
dots <- unlist(list(...))
print (dots)
#   validate(
#     need(length(dots) < 5,
#          message = "Only up to four drugs allowed for now!"),
#     errorClass = "too-many-warning"
#   )
do.call(rbind,
lapply(dots, FUN = function(input_drug) {
# tryCatch(
tbl_df(
query_drug(input_drug) %>%
#fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count(variable) %>%
fda_exec()
) %>%
mutate(drug = input_drug)
# error = function(e) {
#     stop("Oops, API limit hit, please try again shortly!")
#})
}))
}
drug <- c("oxycodone","aspirin")
a <- dcast(
count_fda(variable = "patient.drug.drugindication",
drug),
term ~ drug, value.var = "count")
query_drug <- function(drug) {
fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_filter("patient.drug.openfda.generic_name",
drug)
}
count_fda <- function(variable, ...) {
dots <- unlist(list(...))
print (dots)
#   validate(
#     need(length(dots) < 5,
#          message = "Only up to four drugs allowed for now!"),
#     errorClass = "too-many-warning"
#   )
do.call(rbind,
lapply(dots, FUN = function(input_drug) {
tryCatch(
tbl_df(
query_drug(input_drug) %>%
#fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count(variable) %>%
fda_exec()
) %>%
mutate(drug = input_drug)
error = function(e) {
stop("Oops, API limit hit, please try again shortly!")
})
}))
}
count_fda <- function(variable, ...) {
dots <- unlist(list(...))
print (dots)
#   validate(
#     need(length(dots) < 5,
#          message = "Only up to four drugs allowed for now!"),
#     errorClass = "too-many-warning"
#   )
do.call(rbind,
lapply(dots, FUN = function(input_drug) {
tryCatch(
tbl_df(
query_drug(input_drug) %>%
#fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_count(variable) %>%
fda_exec()
) %>%
mutate(drug = input_drug),
error = function(e) {
stop("Oops, API limit hit, please try again shortly!")
})
}))
}
query_drug <- function(drug) {
fda_query("/drug/event.json") %>%
fda_api_key("4kdJ2pgx9MCYScE11gXrhfJIp7jIfxv7UsbrkUti") %>%
fda_filter("patient.drug.openfda.generic_name",
drug)
}
drug <- c("oxycodone","aspirin")
a <- dcast(
count_fda(variable = "patient.drug.drugindication",
drug),
term ~ drug, value.var = "count")
head(a)
shiny::runApp()
drug <- c("oxycodone","aspirin")
a <- dcast(
count_fda(variable = "patient.reaction.reactionmeddrapt",
drug),
term ~ drug, value.var = "count")
head(a)
shiny::runApp()
drug <- c("aspirin")
a <- dcast(
count_fda(variable = "patient.reaction.reactionmeddrapt",
drug),
term ~ drug, value.var = "count")
a
head(a)
head(sort(a$aspirin))
head(a[,sort(a$aspirin)])
class(a)
head(a[with(a, order(-aspirin)), ])
head(a[with(a, order(-aspirin)), ],10)
drug <- c("acetaminophen")
a <- dcast(
count_fda(variable = "patient.reaction.reactionmeddrapt",
drug),
term ~ drug, value.var = "count")
head(a[with(a, order(-acetaminophen)), ],10)
drug <- c("naproxen")
a <- dcast(
count_fda(variable = "patient.reaction.reactionmeddrapt",
drug),
term ~ drug, value.var = "count")
head(a[with(a, order(-naproxen)), ],10)
shiny::runApp()
d = fda_query("/drug/event.json") %>%
fda_filter("patient.drug.openfda.pharm_class_epc","nonsteroidal+anti-inflammatory+drug", "paroxetine") %>%
fda_count("patient.reaction.reactionmeddrapt.exact") %>%
fda_exec()
d = fda_query("/drug/event.json") %>%
fda_filter("patient.drug.openfda.pharm_class_epc","nonsteroidal+anti-inflammatory+drug") %>%
fda_count("patient.reaction.reactionmeddrapt.exact") %>%
fda_exec()
head(d)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
